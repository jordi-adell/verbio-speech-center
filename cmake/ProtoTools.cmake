

find_program(GRPC_CPP_PLUGIN grpc_cpp_plugin REQUIRED)
find_program(PROTOBUF_PROTOC protoc REQUIRED)
function(protobuf_generate_grpc_cpp SOURCES_VARIABLE HEADERS_VARIABLE PROTO_FILE_PATH)
    get_filename_component(PROTO_FILE_NAME "${PROTO_FILE_PATH}" NAME_WLE)
    get_filename_component(PROTO_FILE_ABSOLUTE_PATH "${PROTO_FILE_PATH}" ABSOLUTE)
    get_filename_component(PROTO_FILE_DIR_PATH "${PROTO_FILE_ABSOLUTE_PATH}" DIRECTORY)
    set(PROTO_CPP_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/${PROTO_FILE_NAME}.pb.cc")
    set(PROTO_CPP_HEADERS "${CMAKE_CURRENT_BINARY_DIR}/${PROTO_FILE_NAME}.pb.h")
    set(GRPC_CPP_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/${PROTO_FILE_NAME}.grpc.pb.cc")
    set(GRPC_CPP_HEADERS "${CMAKE_CURRENT_BINARY_DIR}/${PROTO_FILE_NAME}.grpc.pb.h")
    add_custom_command(
            OUTPUT "${PROTO_CPP_SOURCES}" "${PROTO_CPP_HEADERS}" "${GRPC_CPP_SOURCES}" "${GRPC_CPP_HEADERS}"
            COMMAND ${PROTOBUF_PROTOC}
            ARGS --grpc_out "${CMAKE_CURRENT_BINARY_DIR}"
            --cpp_out "${CMAKE_CURRENT_BINARY_DIR}"
            -I "${PROTO_FILE_DIR_PATH}"
            --plugin=protoc-gen-grpc="${GRPC_CPP_PLUGIN}"
            "${PROTO_FILE_ABSOLUTE_PATH}"
            DEPENDS "${PROTO_FILE_ABSOLUTE_PATH}"
    )
    set(${SOURCES_VARIABLE} ${PROTO_CPP_SOURCES};${GRPC_CPP_SOURCES} PARENT_SCOPE)
    set(${HEADERS_VARIABLE} ${PROTO_CPP_HEADERS};${GRPC_CPP_HEADERS} PARENT_SCOPE)
endfunction()