syntax = "proto3";

package speechcenter.recognizer.v1;

message RecognitionStreamingResponse {
    oneof recognition_response {
        // If set, specifies the error for the operation.
        RecognitionError error = 1;

        // List of results corresponding to portions of the audio currently being processed.
        RecognitionResult result = 2;
    }
    uint32 completion_cause = 3; //Numerical code corresponding to the MRCP standard completion causes.
}

// A streaming recognition result corresponding to a portion of the audio that is currently being processed.
message RecognitionResult {
    // List of one or more recognition hypotheses ordered in terms of accuracy.
    repeated RecognitionAlternative alternatives = 1;

    // Time offset relative to the beginning of the audio.
    float duration = 2;

    // Indicates whether a result represents an interim result that may change or not.
    bool is_final = 3;
}

// Hypothesis-specific information.
message RecognitionAlternative {
    // Transcript text representing the words that the user spoke.
    string transcript = 1;

    // The confidence estimate between 0.0 and 1.0.
    float confidence = 2;

    // A list of word-specific information for each recognized word.
    repeated WordInfo words = 3;
}

// Word-specific information for recognized words.
message WordInfo {
    // Time offset in seconds relative to the beginning of the audio corresponding to the start of the spoken word.
    float start_time = 1;
    // Time offset in seconds relative to the beginning of the audio corresponding to the end of the spoken word.
    float end_time = 2;
    // The spoken word.
    string word = 3;
    // The confidence estimate between 0.0 and 1.0.
    float confidence = 4;
    //Natural number identifying the speaker
    uint32 speaker_id = 5;
}

message RecognitionError {
    // The reason of the error. This is a constant value that identifies the
    // proximate cause of the error.
    string reason = 1;

    // The logical grouping to which the "reason" belongs. The error domain
    // is typically the registered service name of the tool or product that
    // generates the error.
    string domain = 2;

    // Additional structured details about this error. Usually pictured as a JSON.
    map<string, string> metadata = 3;
}